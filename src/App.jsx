import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { BookOpen, Trophy, Clock, Target, Award, Zap, X, Check, RotateCcw, Volume2, Heart, Flame, Plus, Edit2, Save, Headphones, Eye, ShoppingCart, BarChart3, TrendingUp, Calendar, Info, Coins, Sparkles, Palette, Music, Rocket } from 'lucide-react';
import './styles/word-page.css';
import AddWordForm from './AddWordForm';
import EditWordForm from './EditWordForm';
import WordsList from './WordsList';
import { initialWords } from './data/initialWords';
import { shopItems } from './data/shopItems';
import { autoWords } from './data/autoWords';
import { loadSavedData, saveWords, saveStats, loadCategories, saveCategories } from './utils/storage';
import { formatDate } from './utils/formatDate';
import { calculateNextReview, reviewIntervals } from './utils/calculateNextReview';

const defaultCategories = ['–†–∞–∑–Ω–æ–µ', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–ü—Ä–∏—Ä–æ–¥–∞', '–≠–º–æ—Ü–∏–∏', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ï–¥–∞', '–î–æ–º', '–ñ–∏–≤–æ—Ç–Ω—ã–µ'];

  const App = () => {
  const savedData = loadSavedData(initialWords);
  const maxLevel = reviewIntervals.length;
  const [categoryOptions, setCategoryOptions] = useState(() => loadCategories(defaultCategories));
  const categories = ['all', ...categoryOptions];
  const [words, setWords] = useState(savedData.words);
  const [currentView, setCurrentView] = useState('dashboard');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [reviewWords, setReviewWords] = useState([]);
  const [showAnswer, setShowAnswer] = useState(false);
  const [userStats, setUserStats] = useState(savedData.stats);
  const [trainingWords, setTrainingWords] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showResult, setShowResult] = useState(false);
  const [userInput, setUserInput] = useState('');
  const [showHint, setShowHint] = useState(false);
  const [scrambledLetters, setScrambledLetters] = useState([]);
  const [selectedLetters, setSelectedLetters] = useState([]);
  const [trainingQueue, setTrainingQueue] = useState([]);
  const [taskIndex, setTaskIndex] = useState(0);
  const wordTaskCounts = useRef({});
  const [wordCorrectMap, setWordCorrectMap] = useState({});
  const [trainingType, setTrainingType] = useState('zapominanie');
  const [trainingStats, setTrainingStats] = useState({ correct: 0, incorrect: 0, results: [] });
  const trainingStartLevels = useRef({});
  const playSound = useCallback((success) => {
    try {
      const ctx = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = ctx.createOscillator();
      const gain = ctx.createGain();
      oscillator.type = 'sine';
      oscillator.frequency.value = success ? 800 : 200;
      oscillator.connect(gain);
      gain.connect(ctx.destination);
      oscillator.start();
      gain.gain.setValueAtTime(0.1, ctx.currentTime);
      gain.gain.exponentialRampToValueAtTime(0.0001, ctx.currentTime + 0.3);
      oscillator.stop(ctx.currentTime + 0.3);
    } catch (e) {
      console.error(e);
    }
  }, []);
  const [timeLeft, setTimeLeft] = useState(null);
  const [showAddWordForm, setShowAddWordForm] = useState(false);
  const [wordListModal, setWordListModal] = useState(null);
  const [selectedWord, setSelectedWord] = useState(null);
  const [editingWord, setEditingWord] = useState(null);
  const [newWord, setNewWord] = useState({
    english: '',
    russian: '',
    category: categoryOptions[0],
    image: 'üìù',
    examples: ['', ''],
    pronunciation: ''
  });

  const updateWordProgress = useCallback((word, correct) => {
    const now = Date.now();
    const intervalPassed = now >= word.nextReview;
    let level = word.level ?? 0;
    if (correct && intervalPassed) {
      level = Math.min(level + 1, maxLevel);
    }
    const nextReview = (!correct || intervalPassed) ? calculateNextReview(level) : word.nextReview;
    const status = level >= maxLevel ? 'mastered' : level > 0 ? 'learning' : 'new';
    return {
      ...word,
      reviewCount: word.reviewCount + 1,
      errorCount: !correct ? (word.errorCount || 0) + 1 : (word.errorCount || 0),
      level,
      nextReview,
      status,
      lastReviewed: now
    };
  }, [maxLevel]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–µ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    setUserStats(prev => {
      const today = new Date().toDateString();
      if (prev.lastActiveDate === today) return prev;
      let newStreak = 1;
      if (prev.lastActiveDate) {
        const diff = Math.floor((new Date(today) - new Date(prev.lastActiveDate)) / (1000 * 60 * 60 * 24));
        newStreak = diff === 1 ? prev.streak + 1 : 1;
      }
      return {
        ...prev,
        streak: newStreak,
        bestStreak: Math.max(prev.bestStreak, newStreak),
        lastActiveDate: today
      };
    });
  }, []);

  // –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const emojiList = [
    'üìù', 'üåü', 'üåà', 'üî•', 'üí°', 'üé®', 'üé≠', 'üé™', 'üéØ', 'üé≤', 'üé∏', 'üéπ', 'üèÜ', 'üöÄ', '‚ú®', 'üíé',
    'üå∫', 'üå∏', 'üåº', 'üåª', 'üå∑', 'üåπ', 'üçÄ', 'üå≤', 'üå≥', 'üå¥', 'üåµ', 'üåä', '‚õ∞Ô∏è', 'üèîÔ∏è', 'üåã',
    'üèùÔ∏è', 'üèñÔ∏è', 'üåÖ', 'üåÑ', 'üå†', 'üåå', '‚òÄÔ∏è', 'üåô', '‚≠ê', '‚òÅÔ∏è', '‚õÖ', 'üå§Ô∏è', 'üå•Ô∏è', 'üå¶Ô∏è',
    'üåßÔ∏è', '‚õàÔ∏è', '‚ùÑÔ∏è', '‚òÉÔ∏è', 'üå®Ô∏è', 'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®',
    'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üê¶', 'üê§', 'üêß', 'ü¶Ö', 'ü¶Ü', 'ü¶â', 'üê∫', 'üêó',
    'üê¥', 'ü¶Ñ', 'üêù', 'ü¶ã', 'üêå', 'üêû', 'üê¢', 'üêç', 'üêô', 'ü¶ë', 'ü¶Ä', 'üê†', 'üêü', 'üê°',
    'üê¨', 'üê≥', 'ü¶à', 'üåç', 'üåé', 'üåè', '‚ö°', 'üéÅ', 'üìö', 'üì±', 'üíª', '‚åö',
    'üçé', 'üçî', 'üçï', 'üç£', 'üöó', 'üéÆ', '‚ù§Ô∏è', 'üòÇ', 'üëç', 'ü•≥', 'ü§î', 'üìñ', 'üß†', 'üì∑', 'üéß', 'üéµ', '‚öΩ', 'üèÄ', 'üèà', 'üõí',
    'üçá', 'üçâ', 'üçå', 'üçí', 'üçì', 'üçë', 'üçç', 'ü•ù', 'ü•ë', 'ü•¶', 'ü•ï', 'üåΩ', 'üçû', 'üßÄ', 'ü•®', 'üç©', 'üç™', 'üéÇ', 'üç∞', 'üßÅ',
    'üç¨', 'üç≠', 'üç´', 'üçø', '‚òï', 'üçµ', 'üç∑', 'üç∏', 'üç∫', 'ü•Ç', 'üçπ', 'ü•§', 'üçΩÔ∏è', 'üç¥', 'üîë', 'üî®', 'üõ†Ô∏è', '‚è∞', 'üìÖ', 'üìé',
    '‚úèÔ∏è', 'üìå', 'üìç', '‚úÇÔ∏è', 'üì¢', 'üîî', 'üéÄ', 'üìÆ', 'üìä', 'üé•'
  ];

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  useEffect(() => {
    saveWords(words);
  }, [words]);

  useEffect(() => {
    saveStats(userStats);
  }, [userStats]);

  useEffect(() => {
    saveCategories(categoryOptions);
  }, [categoryOptions]);
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredWords = useMemo(() =>
    selectedCategory === 'all'
      ? words
      : words.filter(w => w.category === selectedCategory),
    [words, selectedCategory]
  );

  // –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è)
  const wordsToReview = useMemo(() =>
    words.filter(w => w.nextReview <= new Date().getTime() && w.status !== 'mastered'),
    [words]
  );

  const newWords = useMemo(() =>
    words.filter(w => w.reviewCount === 0),
    [words]
  );

  const addCategory = () => {
    const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    if (name && !categoryOptions.includes(name)) {
      setCategoryOptions(prev => [...prev, name]);
    }
  };

  // –ü–æ–∫—É–ø–∫–∞/–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
  const purchaseItem = useCallback((item) => {
    const isPurchased = userStats.purchasedItems.includes(item.id);

    if (item.type === 'theme') {
      if (!isPurchased) {
        if (userStats.coins >= item.price) {
          setUserStats(prev => ({
            ...prev,
            coins: prev.coins - item.price,
            purchasedItems: [...prev.purchasedItems, item.id],
            currentTheme: item.id
          }));
          alert(`‚ú® –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ: ${item.name}!`);
        } else {
          alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ –µ—â—ë ${item.price - userStats.coins} –º–æ–Ω–µ—Ç.`);
        }
      } else {
        setUserStats(prev => ({
          ...prev,
          currentTheme: prev.currentTheme === item.id ? 'default' : item.id
        }));
      }
      return;
    }

    if (userStats.coins >= item.price && !isPurchased) {
      setUserStats(prev => ({
        ...prev,
        coins: prev.coins - item.price,
        purchasedItems: [...prev.purchasedItems, item.id],
        hintsRemaining: item.id === 'hint-pack' ? prev.hintsRemaining + 5 : prev.hintsRemaining,
        activeBoosts: item.type === 'boost' ? [...prev.activeBoosts, { id: item.id, expiresAt: Date.now() + 24 * 60 * 60 * 1000 }] : prev.activeBoosts
      }));
      alert(`‚ú® –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ: ${item.name}!`);
    } else if (userStats.coins < item.price && !isPurchased) {
      alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ –µ—â—ë ${item.price - userStats.coins} –º–æ–Ω–µ—Ç.`);
    } else {
      alert('‚ùå –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!');
    }
  }, [userStats.coins, userStats.purchasedItems]);

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É
  const getThemeColors = useCallback(() => {
    switch(userStats.currentTheme) {
      case 'theme-dark':
        return 'bg-gradient-to-br from-gray-900 to-gray-700';
      case 'theme-ocean':
        return 'bg-gradient-to-br from-blue-400 to-cyan-300';
      case 'theme-forest':
        return 'bg-gradient-to-br from-green-400 to-emerald-300';
      default:
        return 'bg-gradient-to-br from-blue-50 to-purple-50';
    }
  }, [userStats.currentTheme]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
  const handleCardAnswer = useCallback((correct) => {
    const currentWord = reviewWords[currentCardIndex];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç–æ–≤
    const hasXPBoost = userStats.activeBoosts.some(b => b.id === 'boost-xp' && b.expiresAt > Date.now());
    const hasCoinBoost = userStats.activeBoosts.some(b => b.id === 'boost-coins' && b.expiresAt > Date.now());

    setWords(prevWords => {
      const updatedWords = prevWords.map(w =>
        w.id === currentWord.id ? updateWordProgress(w, correct) : w
      );

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è
      setUserStats(prev => ({
        ...prev,
        xp: correct ? prev.xp + (hasXPBoost ? 20 : 10) : prev.xp,
        coins: correct ? prev.coins + (hasCoinBoost ? 10 : 5) : prev.coins,
        totalWords: correct ? prev.totalWords + (currentWord.reviewCount === 0 ? 1 : 0) : prev.totalWords,
        masteredWords: updatedWords.filter(w => w.status === 'mastered').length,
        level: correct ? Math.floor((prev.xp + (hasXPBoost ? 20 : 10)) / 100) + 1 : prev.level,
        totalReviews: prev.totalReviews + 1
      }));

      return updatedWords;
    });

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    setTimeout(() => {
      setShowAnswer(false);
      if (currentCardIndex < reviewWords.length - 1) {
        setCurrentCardIndex(currentCardIndex + 1);
      } else {
        setCurrentView('dashboard');
        setCurrentCardIndex(0);
      }
    }, 1000);
  }, [reviewWords, currentCardIndex, userStats.activeBoosts, updateWordProgress]);

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
  const deleteWord = useCallback((wordId, confirm = true) => {
    if (!confirm || window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ?')) {
      setWords(prev => {
        const updated = prev.filter(w => w.id !== wordId);
        saveWords(updated);
        return updated;
      });
    }
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
  const addNewWord = useCallback(() => {
    if (newWord.english && newWord.russian) {
      const word = {
        ...newWord,
        id: Date.now(),
        category: newWord.category || '–†–∞–∑–Ω–æ–µ',
        image: newWord.image || 'üìù',
        examples: newWord.examples.filter(ex => ex.length > 0),
        difficulty: 1,
        nextReview: new Date().getTime(),
        reviewCount: 0,
        errorCount: 0,
        level: 0,
        starred: false,
        status: 'new',
        createdAt: new Date().getTime(),
        lastReviewed: null
      };

      setWords(prev => {
        const updated = [...prev, word];
        saveWords(updated);
        return updated;
      });
      setNewWord({
        english: '',
        russian: '',
        category: categoryOptions[0],
        image: 'üìù',
        examples: ['', ''],
        pronunciation: ''
      });
      setShowAddWordForm(false);
      
      // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
      setUserStats(prev => ({
        ...prev,
        coins: prev.coins + 2
      }));
    }
    }, [newWord, categoryOptions]);

  const importCSV = useCallback((file) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const text = e.target.result;
      const lines = text.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
      const imported = lines.map(line => {
        const [english, russian, category, pronunciation, example] = line.split(',').map(s => s.trim());
        if (!english || !russian) return null;
        return {
          id: Date.now() + Math.random(),
          english,
          russian,
          category: category || categoryOptions[0],
          image: 'üìù',
          examples: example ? [example] : [],
          pronunciation: pronunciation || '',
          difficulty: 1,
          nextReview: Date.now(),
          reviewCount: 0,
          errorCount: 0,
          level: 0,
          starred: false,
          status: 'new',
          createdAt: Date.now(),
          lastReviewed: null,
        };
      }).filter(Boolean);
      if (imported.length) {
        setWords(prev => {
          const updated = [...prev, ...imported];
          saveWords(updated);
          return updated;
        });
      }
    };
    reader.readAsText(file);
  }, [categoryOptions]);

  // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞
  const generateAutoWord = useCallback(() => {
    try {
      const available = autoWords.filter(
        w => !words.some(word => word.english.toLowerCase() === w.english.toLowerCase())
      );
      if (available.length === 0) return;
      const base = available[Math.floor(Math.random() * available.length)];
      const word = {
        id: Date.now(),
        english: base.english,
        russian: base.russian,
        category: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
        image: base.image,
        examples: base.examples || [],
        pronunciation: base.pronunciation || '',
        difficulty: 1,
        nextReview: Date.now(),
        reviewCount: 0,
        errorCount: 0,
        level: 0,
        starred: false,
        status: 'new',
        createdAt: Date.now(),
        lastReviewed: null,
      };
      setWords(prev => {
        const updated = [...prev, word];
        saveWords(updated);
        return updated;
      });
      if (!categoryOptions.includes('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ')) {
        setCategoryOptions(prev => [...prev, '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ']);
      }
      setUserStats(prev => ({ ...prev, coins: prev.coins + 2 }));
    } catch (err) {
      console.error('Auto generation failed', err);
    }
  }, [words, categoryOptions]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
  const generateQuestion = useCallback((task) => {
    if (!task) return;

    const { word: correctWord, type: actualMode } = task;

    if (actualMode === 'multiple-choice-en-ru' || actualMode === 'word-choice') {
      const otherWords = words.filter(w => w.id !== correctWord.id);
      const wrongAnswers = [];

      for (let i = 0; i < 3 && i < otherWords.length; i++) {
        wrongAnswers.push(otherWords[Math.floor(Math.random() * otherWords.length)]);
      }

      const allAnswers = [correctWord, ...wrongAnswers].sort(() => Math.random() - 0.5);

      setCurrentQuestion({
        word: correctWord,
        answers: allAnswers,
        correctId: correctWord.id,
        type: actualMode
      });
    } else if (actualMode === 'typing-en-ru' || actualMode === 'typing-ru-en') {
      setCurrentQuestion({
        word: correctWord,
        correctAnswer: actualMode === 'typing-en-ru' ? correctWord.russian : correctWord.english,
        type: actualMode
      });
    } else if (actualMode === 'scramble') {
      const letters = correctWord.english.toLowerCase().split('');
      const scrambled = [...letters].sort(() => Math.random() - 0.5);
      setScrambledLetters(scrambled.map((letter, index) => ({ letter, id: index, used: false })));
      setCurrentQuestion({
        word: correctWord,
        correctAnswer: correctWord.english.toLowerCase(),
        type: actualMode
      });
    } else if (actualMode === 'listening') {
      setCurrentQuestion({
        word: correctWord,
        correctAnswer: correctWord.english,
        type: actualMode
      });
    } else if (actualMode === 'first-letter') {
      setCurrentQuestion({
        word: correctWord,
        correctAnswer: correctWord.english,
        hint: correctWord.english[0].toUpperCase() + '_'.repeat(correctWord.english.length - 1),
        type: actualMode
      });
    }

    setSelectedAnswer(null);
    setShowResult(false);
  }, [words]);

  // –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  const startTraining = useCallback(() => {
    const wordsForTraining = wordsToReview.slice(0, 10);

    if (wordsForTraining.length === 0) {
      alert('–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    const modes = ['multiple-choice-en-ru', 'word-choice', 'typing-en-ru', 'typing-ru-en', 'scramble', 'listening', 'first-letter'];
    const tasks = [];
    const counts = {};
    const correctMapInit = {};

    wordsForTraining.forEach(w => {
      counts[w.id] = modes.length;
      correctMapInit[w.id] = true;
      modes.forEach(m => tasks.push({ word: w, type: m }));
      trainingStartLevels.current[w.id] = w.level || 0;
    });

    tasks.sort(() => Math.random() - 0.5);

    setTrainingQueue(tasks);
    setTaskIndex(0);
    wordTaskCounts.current = counts;
    setWordCorrectMap(correctMapInit);
    setTrainingWords(wordsForTraining);
    setTrainingType('zapominanie');
    setTrainingStats({ correct: 0, incorrect: 0, results: [] });
    generateQuestion(tasks[0]);
    setCurrentView('training');
    setUserInput('');
    setShowHint(false);
    setSelectedLetters([]);
  }, [wordsToReview, generateQuestion]);

  const startJam = useCallback(() => {
    if (words.length === 0) {
      alert('–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!');
      return;
    }
    const modes = ['multiple-choice-en-ru', 'word-choice', 'typing-en-ru', 'typing-ru-en', 'scramble', 'listening', 'first-letter'];
    const shuffled = [...words].sort(() => Math.random() - 0.5).slice(0, 30);
    const tasks = shuffled.map(w => ({ word: w, type: modes[Math.floor(Math.random() * modes.length)] }));

    setTrainingQueue(tasks);
    setTaskIndex(0);
    wordTaskCounts.current = Object.fromEntries(shuffled.map(w => [w.id, 1]));
    setWordCorrectMap({});
    setTrainingWords(shuffled);
    setTrainingType('jam');
    setTrainingStats({ correct: 0, incorrect: 0, results: [] });
    generateQuestion(tasks[0]);
    setCurrentView('training');
    setUserInput('');
    setShowHint(false);
    setSelectedLetters([]);
  }, [words, generateQuestion]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ
  const checkAnswer = useCallback((answer) => {
    let correct = false;
    const mode = currentQuestion.type;

    if (mode === 'multiple-choice-en-ru' || mode === 'word-choice') {
      setSelectedAnswer(answer);
      correct = answer === currentQuestion.correctId;
    } else if (mode === 'typing-en-ru' || mode === 'typing-ru-en' || mode === 'listening' || mode === 'first-letter') {
      correct = userInput.toLowerCase().trim() === currentQuestion.correctAnswer.toLowerCase();
    } else if (mode === 'scramble') {
      const assembled = selectedLetters.map(l => l.letter).join('');
      correct = assembled === currentQuestion.correctAnswer;
    }

    setShowResult(true);
    playSound(correct);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç–æ–≤
    const hasXPBoost = userStats.activeBoosts.some(b => b.id === 'boost-xp' && b.expiresAt > Date.now());
    const hasCoinBoost = userStats.activeBoosts.some(b => b.id === 'boost-coins' && b.expiresAt > Date.now());

    if (correct) {
      setUserStats(prev => ({
        ...prev,
        xp: prev.xp + (hasXPBoost ? 30 : 15),
        coins: prev.coins + (hasCoinBoost ? 20 : 10),
        level: Math.floor((prev.xp + (hasXPBoost ? 30 : 15)) / 100) + 1,
        totalReviews: prev.totalReviews + 1
      }));
    } else {
      setUserStats(prev => ({
        ...prev,
        totalReviews: prev.totalReviews + 1
      }));
    }

    const wordId = currentQuestion.word.id;
    const newCorrectValue = (wordCorrectMap[wordId] ?? true) && correct;
    setWordCorrectMap(prev => ({ ...prev, [wordId]: newCorrectValue }));
    const newCount = (wordTaskCounts.current[wordId] || 0) - 1;
    wordTaskCounts.current[wordId] = newCount;
    if (newCount === 0) {
      if (trainingType === 'zapominanie') {
        const updatedWord = updateWordProgress(currentQuestion.word, newCorrectValue);
        setWords(w => w.map(word => word.id === wordId ? updatedWord : word));
        setTrainingStats(prev => ({
          ...prev,
          correct: prev.correct + (newCorrectValue ? 1 : 0),
          incorrect: prev.incorrect + (newCorrectValue ? 0 : 1),
          results: [...prev.results, {
            id: updatedWord.id,
            word: updatedWord.english,
            level: updatedWord.level,
            levelUp: updatedWord.level - (trainingStartLevels.current[wordId] || 0),
            learned: updatedWord.status === 'mastered'
          }]
        }));
      } else {
        setTrainingStats(prev => ({
          ...prev,
          correct: prev.correct + (newCorrectValue ? 1 : 0),
          incorrect: prev.incorrect + (newCorrectValue ? 0 : 1),
          results: [...prev.results, { id: wordId, word: currentQuestion.word.english, correct: newCorrectValue }]
        }));
      }
      setTrainingWords(words => words.filter(w => w.id !== wordId));
    }

    setTimeout(() => {
      const nextIndex = taskIndex + 1;
      if (nextIndex < trainingQueue.length) {
        setTaskIndex(nextIndex);
        generateQuestion(trainingQueue[nextIndex]);
        setUserInput('');
        setSelectedLetters([]);
        setShowHint(false);
      } else {
        setCurrentView('trainingSummary');
      }
    }, 2000);
  }, [currentQuestion, userInput, selectedLetters, userStats.activeBoosts, wordCorrectMap, trainingQueue, taskIndex, updateWordProgress, generateQuestion, trainingType, playSound]);

  const checkAnswerRef = useRef(checkAnswer);
  useEffect(() => { checkAnswerRef.current = checkAnswer; }, [checkAnswer]);

  useEffect(() => {
    if (trainingType === 'jam' && currentView === 'training' && !showResult) {
      setTimeLeft(10);
      const interval = setInterval(() => {
        setTimeLeft(prev => {
          if (prev === 1) {
            clearInterval(interval);
            checkAnswerRef.current(null);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
      return () => clearInterval(interval);
    } else if (trainingType === 'jam') {
      setTimeLeft(null);
    }
  }, [taskIndex, currentView, trainingType, showResult]);

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
  const useHint = useCallback(() => {
    if (userStats.hintsRemaining > 0) {
      setShowHint(true);
      setUserStats(prev => ({
        ...prev,
        hintsRemaining: prev.hintsRemaining - 1
      }));
    } else {
      alert('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∏! –ö—É–ø–∏—Ç–µ –±–æ–ª—å—à–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.');
    }
  }, [userStats.hintsRemaining]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—É–∫–≤ –¥–ª—è scramble —Ä–µ–∂–∏–º–∞
  const handleLetterClick = useCallback((letter, fromScrambled) => {
    if (showResult) return;
    
    if (fromScrambled && !letter.used) {
      setSelectedLetters(prev => [...prev, letter]);
      setScrambledLetters(prev => prev.map(l => 
        l.id === letter.id ? { ...l, used: true } : l
      ));
    } else if (!fromScrambled) {
      setSelectedLetters(prev => prev.filter(l => l.id !== letter.id));
      setScrambledLetters(prev => prev.map(l => 
        l.id === letter.id ? { ...l, used: false } : l
      ));
    }
  }, [showResult]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
  const handleNewWordChange = useCallback((field, value) => {
    setNewWord(prev => ({ ...prev, [field]: value }));
  }, []);

  const handleImageUpload = useCallback((e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = () => {
      const img = new Image();
      img.onload = () => {
        const MAX_SIZE = 256;
        let { width, height } = img;
        if (width > height && width > MAX_SIZE) {
          height = height * (MAX_SIZE / width);
          width = MAX_SIZE;
        } else if (height >= width && height > MAX_SIZE) {
          width = width * (MAX_SIZE / height);
          height = MAX_SIZE;
        }

        const canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, width, height);
        const dataUrl = canvas.toDataURL('image/jpeg', 0.8);
        setNewWord(prev => ({ ...prev, image: dataUrl }));
      };
      img.src = reader.result;
    };
    reader.readAsDataURL(file);
  }, [setNewWord]);

  const handleExampleChange = useCallback((index, value) => {
    setNewWord(prev => {
      const newExamples = [...prev.examples];
      newExamples[index] = value;
      return { ...prev, examples: newExamples };
    });
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
  const handleEditWordChange = useCallback((field, value) => {
    setEditingWord(prev => ({ ...prev, [field]: value }));
  }, []);

  const handleEditExampleChange = useCallback((index, value) => {
    setEditingWord(prev => {
      const examples = [...(prev.examples || ['', ''])];
      examples[index] = value;
      return { ...prev, examples };
    });
  }, []);

  const handleEditImageUpload = useCallback((e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = () => {
      const img = new Image();
      img.onload = () => {
        const MAX_SIZE = 256;
        let { width, height } = img;
        if (width > height && width > MAX_SIZE) {
          height = height * (MAX_SIZE / width);
          width = MAX_SIZE;
        } else if (height >= width && height > MAX_SIZE) {
          width = width * (MAX_SIZE / height);
          height = MAX_SIZE;
        }

        const canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, width, height);
        const dataUrl = canvas.toDataURL('image/jpeg', 0.8);
        setEditingWord(prev => ({ ...prev, image: dataUrl }));
      };
      img.src = reader.result;
    };
    reader.readAsDataURL(file);
  }, []);

  const saveEditedWord = useCallback(() => {
    if (!editingWord) return;
    setWords(prev => {
      const updated = prev.map(w => (w.id === editingWord.id ? editingWord : w));
      saveWords(updated);
      return updated;
    });
    setEditingWord(null);
  }, [editingWord]);

  const resetWordProgress = useCallback(() => {
    setEditingWord(prev => prev ? {
      ...prev,
      level: 0,
      reviewCount: 0,
      errorCount: 0,
      status: 'new',
      nextReview: Date.now(),
      lastReviewed: null,
    } : prev);
  }, []);

  const markWordLearned = useCallback(() => {
    setEditingWord(prev => prev ? {
      ...prev,
      level: maxLevel,
      status: 'mastered',
      nextReview: Date.now(),
    } : prev);
  }, [maxLevel]);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞
  const Shop = () => (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white rounded-2xl shadow-xl p-6 mb-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold">–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π</h2>
          <div className="flex items-center gap-2 bg-yellow-100 px-4 py-2 rounded-lg">
            <Coins className="w-5 h-5 text-yellow-600" />
            <span className="font-bold text-yellow-700">{userStats.coins}</span>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {shopItems.map(item => {
            const isPurchased = userStats.purchasedItems.includes(item.id);
            return (
            <div
              key={item.id}
              className={`border-2 rounded-lg p-4 transition-all ${
                item.type === 'theme'
                  ? (userStats.currentTheme === item.id ? 'border-blue-400 shadow-lg' : 'border-gray-200 hover:border-blue-400 hover:shadow-lg')
                  : isPurchased
                    ? 'border-gray-300 bg-gray-50 opacity-50'
                    : 'border-gray-200 hover:border-blue-400 hover:shadow-lg'
              }`}
            >
              <div className="flex items-start justify-between mb-2">
                <div className="flex items-center gap-3">
                  <span className="text-3xl">{item.icon}</span>
                  <div>
                    <h3 className="font-bold text-lg">{item.name}</h3>
                    <p className="text-sm text-gray-600">{item.description}</p>
                  </div>
                </div>
              </div>

              <div className="flex items-center justify-between mt-4">
                <div className="flex items-center gap-2">
                  <Coins className="w-4 h-4 text-yellow-600" />
                  <span className="font-bold">{item.price}</span>
                </div>

                <button
                  onClick={() => purchaseItem(item)}
                  disabled={!isPurchased && userStats.coins < item.price}
                  className={`px-4 py-2 rounded-lg font-semibold transition-colors ${
                    !isPurchased && userStats.coins < item.price
                      ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      : 'bg-blue-500 text-white hover:bg-blue-600'
                  }`}
                >
                  {item.type === 'theme'
                    ? (isPurchased ? (userStats.currentTheme === item.id ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å') : '–ö—É–ø–∏—Ç—å')
                    : (isPurchased ? '–ö—É–ø–ª–µ–Ω–æ' : '–ö—É–ø–∏—Ç—å')}
                </button>
              </div>
            </div>
          );})}
        </div>
      </div>
      
      <div className="bg-blue-50 rounded-lg p-4">
        <h3 className="font-bold mb-2 flex items-center gap-2">
          <Info className="w-5 h-5 text-blue-600" />
          –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã?
        </h3>
        <ul className="space-y-1 text-sm">
          <li>‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö: +5 –º–æ–Ω–µ—Ç (x2 —Å –±—É—Å—Ç–µ—Ä–æ–º)</li>
          <li>‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ: +10 –º–æ–Ω–µ—Ç (x2 —Å –±—É—Å—Ç–µ—Ä–æ–º)</li>
          <li>‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞: +2 –º–æ–Ω–µ—Ç—ã</li>
          <li>‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è: +50 –º–æ–Ω–µ—Ç</li>
        </ul>
      </div>
    </div>
  );

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const Statistics = () => {
    const daysActive = Math.floor((Date.now() - userStats.startDate) / (1000 * 60 * 60 * 24)) || 1;
    const successRate = userStats.totalReviews > 0 
      ? Math.round((words.filter(w => w.status === 'mastered').length / words.length) * 100)
      : 0;
    
    return (
      <div className="max-w-4xl mx-auto p-6 space-y-6">
        {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="bg-white rounded-2xl shadow-xl p-6">
          <h2 className="text-2xl font-bold mb-6">–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
          
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <TrendingUp className="w-8 h-8 text-blue-600 mx-auto mb-2" />
              <p className="text-2xl font-bold text-blue-900">{userStats.level}</p>
              <p className="text-sm text-gray-600">–£—Ä–æ–≤–µ–Ω—å</p>
            </div>
            
            <div className="text-center p-4 bg-green-50 rounded-lg">
              <Award className="w-8 h-8 text-green-600 mx-auto mb-2" />
              <p className="text-2xl font-bold text-green-900">{successRate}%</p>
              <p className="text-sm text-gray-600">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</p>
            </div>
            
            <div className="text-center p-4 bg-purple-50 rounded-lg">
              <Flame className="w-8 h-8 text-purple-600 mx-auto mb-2" />
              <p className="text-2xl font-bold text-purple-900">{userStats.bestStreak}</p>
              <p className="text-sm text-gray-600">–õ—É—á—à–∞—è —Å–µ—Ä–∏—è</p>
            </div>
            
            <div className="text-center p-4 bg-yellow-50 rounded-lg">
              <Calendar className="w-8 h-8 text-yellow-600 mx-auto mb-2" />
              <p className="text-2xl font-bold text-yellow-900">{daysActive}</p>
              <p className="text-sm text-gray-600">–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
            </div>
          </div>
        </div>
        
        {/* –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ */}
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6">
          <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
            <Info className="w-6 h-6 text-blue-600" />
            –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ?
          </h2>
          
          <div className="space-y-4 text-gray-700">
            <p>
              <strong>–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</strong> ‚Äî —ç—Ç–æ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, 
              –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫—Ä–∏–≤–æ–π –∑–∞–±—ã–≤–∞–Ω–∏—è –≠–±–±–∏–Ω–≥–∞—É–∑–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏.
            </p>
            
            <div className="bg-white rounded-lg p-4">
              <h3 className="font-bold mb-2">üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:</h3>
              <ul className="space-y-1 text-sm">
                <li>‚Ä¢ 1-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ <strong>10 –º–∏–Ω—É—Ç</strong></li>
                <li>‚Ä¢ 2-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ <strong>1 —á–∞—Å</strong></li>
                <li>‚Ä¢ 3-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ <strong>6 —á–∞—Å–æ–≤</strong></li>
                <li>‚Ä¢ 4-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ <strong>1 –¥–µ–Ω—å</strong></li>
                <li>‚Ä¢ 5-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ <strong>3 –¥–Ω—è</strong></li>
                <li>‚Ä¢ 6-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ <strong>7 –¥–Ω–µ–π</strong></li>
                <li>‚Ä¢ 7-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ <strong>14 –¥–Ω–µ–π</strong></li>
                <li>‚Ä¢ 8-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ <strong>30 –¥–Ω–µ–π</strong></li>
                <li>‚Ä¢ 9-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ <strong>90 –¥–Ω–µ–π</strong></li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
  const WordCard = ({ word }) => {
    const isAvailable = word.nextReview <= Date.now();
    return (
      <div className="bg-white rounded-2xl shadow-xl p-8 max-w-md w-full mx-auto transform transition-all hover:scale-105">
        <div className="flex flex-col items-center mb-4">
          {typeof word.image === 'string' && (word.image.startsWith('http') || word.image.startsWith('data:')) ? (
            <img
              src={word.image}
              alt={word.english}
              className="w-24 h-24 object-cover rounded"
            />
          ) : (
            <span className="text-7xl">{word.image}</span>
          )}
          <span className="text-xs text-gray-500 mt-2">
            {isAvailable ? '–î–æ—Å—Ç—É–ø–Ω–æ' : `–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ ${formatDate(word.nextReview)}`}
          </span>
        </div>

        <div className="text-center mb-6">
          <h2 className="text-3xl font-bold text-gray-800 mb-2">{word.english}</h2>
          <p className="text-gray-500 text-sm flex items-center justify-center gap-2">
            <Volume2 className="w-4 h-4" />
            {word.pronunciation}
          </p>
          <p className="text-sm text-gray-500 mt-2">–£—Ä–æ–≤–µ–Ω—å: {word.level}/{maxLevel}</p>
        </div>

        {showAnswer && (
          <div className="space-y-4 animate-fade-in">
            <div className="bg-blue-50 rounded-lg p-4">
              <p className="text-xl font-semibold text-blue-900">{word.russian}</p>
            </div>

            <div className="bg-gray-50 rounded-lg p-4">
              <p className="text-sm font-semibold text-gray-600 mb-2">–ü—Ä–∏–º–µ—Ä—ã:</p>
              {word.examples.map((ex, idx) => (
                <p key={idx} className="text-gray-700 mb-1">‚Ä¢ {ex}</p>
              ))}
            </div>

            <div className="flex gap-3 justify-center mt-6">
              <button
                onClick={() => handleCardAnswer(false)}
                className="flex-1 bg-red-500 text-white py-3 px-6 rounded-lg hover:bg-red-600 transition-colors flex items-center justify-center gap-2"
              >
                <X className="w-5 h-5" />
                –ù–µ –ø–æ–º–Ω—é
              </button>
              <button
                onClick={() => handleCardAnswer(true)}
                className="flex-1 bg-green-500 text-white py-3 px-6 rounded-lg hover:bg-green-600 transition-colors flex items-center justify-center gap-2"
              >
                <Check className="w-5 h-5" />
                –ü–æ–º–Ω—é
              </button>
            </div>
          </div>
        )}

        {!showAnswer && (
          <button
            onClick={() => setShowAnswer(true)}
            className="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white py-3 px-6 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all transform hover:scale-105"
          >
            –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç
          </button>
        )}
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
  const TrainingComponent = () => {
    if (!currentQuestion) return null;
    const mode = currentQuestion.type;

    // –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if (mode === 'multiple-choice-en-ru' || mode === 'word-choice') {
      return (
        <div className="max-w-2xl mx-auto p-6">
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="mb-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-600">
                  {mode === 'multiple-choice-en-ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:' : '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ:'}
                </h3>
                <div className="flex items-center gap-4">
                  <span className="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-semibold">
                    –û—Å—Ç–∞–ª–æ—Å—å: {trainingWords.length}
                  </span>
                  {trainingType === 'jam' && (
                    <span className="bg-red-100 text-red-700 px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                      ‚è±Ô∏è {timeLeft}
                    </span>
                  )}
                  <span className="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                    üí° {userStats.hintsRemaining}
                  </span>
                </div>
              </div>
              
              <div className="text-center py-8">
                {typeof currentQuestion.word.image === 'string' && (currentQuestion.word.image.startsWith('http') || currentQuestion.word.image.startsWith('data:')) ? (
                  <img
                    src={currentQuestion.word.image}
                    alt={currentQuestion.word.english}
                    className="w-24 h-24 mb-4 mx-auto object-cover rounded"
                  />
                ) : (
                  <span className="text-6xl mb-4 inline-block">{currentQuestion.word.image}</span>
                )}
                <h2 className="text-3xl font-bold text-gray-800">
                  {mode === 'multiple-choice-en-ru' ? currentQuestion.word.english : currentQuestion.word.russian}
                </h2>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              {currentQuestion.answers.map((answer) => (
                <button
                  key={answer.id}
                  onClick={() => !showResult && checkAnswer(answer.id)}
                  disabled={showResult}
                  className={`p-4 rounded-lg border-2 transition-all ${
                    showResult
                      ? answer.id === currentQuestion.correctId
                        ? 'bg-green-100 border-green-500'
                        : answer.id === selectedAnswer
                        ? 'bg-red-100 border-red-500'
                        : 'bg-gray-50 border-gray-200'
                      : 'bg-white border-gray-300 hover:border-blue-400 hover:bg-blue-50'
                  }`}
                >
                  <p className="font-semibold">
                    {mode === 'multiple-choice-en-ru' ? answer.russian : answer.english}
                  </p>
                </button>
              ))}
            </div>
          </div>
        </div>
      );
    }
    
    // –†–µ–∂–∏–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    if (mode === 'typing-en-ru' || mode === 'typing-ru-en') {
      return (
        <div className="max-w-2xl mx-auto p-6">
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="mb-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-600">
                  {mode === 'typing-en-ru' ? '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:' : 'Type in English:'}
                </h3>
                <div className="flex items-center gap-4">
                  <span className="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-semibold">
                    –û—Å—Ç–∞–ª–æ—Å—å: {trainingWords.length}
                  </span>
                  {trainingType === 'jam' && (
                    <span className="bg-red-100 text-red-700 px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                      ‚è±Ô∏è {timeLeft}
                    </span>
                  )}
                  <span className="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                    üí° {userStats.hintsRemaining}
                  </span>
                </div>
              </div>
              
              <div className="text-center py-8">
                 {typeof currentQuestion.word.image === 'string' && (currentQuestion.word.image.startsWith('http') || currentQuestion.word.image.startsWith('data:')) ? (
                  <img
                    src={currentQuestion.word.image}
                    alt={currentQuestion.word.english}
                    className="w-24 h-24 mb-4 mx-auto object-cover rounded"
                  />
                ) : (
                  <span className="text-6xl mb-4 inline-block">{currentQuestion.word.image}</span>
                )}
                <h2 className="text-3xl font-bold text-gray-800">
                  {mode === 'typing-en-ru' ? currentQuestion.word.english : currentQuestion.word.russian}
                </h2>
                {showHint && (
                  <p className="text-gray-500 mt-2">
                    –ü–æ–¥—Å–∫–∞–∑–∫–∞: {currentQuestion.correctAnswer.slice(0, Math.ceil(currentQuestion.correctAnswer.length / 2))}...
                  </p>
                )}
              </div>
            </div>
            
            <div className="space-y-4">
              <input
                type="text"
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && !showResult && checkAnswer()}
                disabled={showResult}
                className="w-full px-4 py-3 text-lg border-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç..."
                autoFocus
              />
              
              {showResult && (
                <div className={`p-4 rounded-lg ${
                  userInput.toLowerCase().trim() === currentQuestion.correctAnswer.toLowerCase()
                    ? 'bg-green-100 text-green-800'
                    : 'bg-red-100 text-red-800'
                }`}>
                  {userInput.toLowerCase().trim() === currentQuestion.correctAnswer.toLowerCase() ? (
                    <p className="font-semibold">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</p>
                  ) : (
                    <div>
                      <p className="font-semibold">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</p>
                      <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {currentQuestion.correctAnswer}</p>
                    </div>
                  )}
                </div>
              )}
              
              {!showResult && (
                <div className="flex gap-3">
                  <button
                    onClick={useHint}
                    disabled={showHint}
                    className="flex-1 bg-yellow-500 text-white py-2 px-4 rounded-lg hover:bg-yellow-600 transition-colors disabled:opacity-50"
                  >
                    üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ ({userStats.hintsRemaining})
                  </button>
                  <button
                    onClick={() => checkAnswer()}
                    className="flex-1 bg-gradient-to-r from-blue-500 to-purple-600 text-white py-2 px-4 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-colors"
                  >
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    }
    
    // –†–µ–∂–∏–º —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ –±—É–∫–≤
    if (mode === 'scramble') {
      const assembled = selectedLetters.map(l => l.letter).join('');
      
      return (
        <div className="max-w-2xl mx-auto p-6">
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="mb-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-600">
                  –°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –±—É–∫–≤:
                </h3>
                <div className="flex items-center gap-4">
                  <span className="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-semibold">
                    –û—Å—Ç–∞–ª–æ—Å—å: {trainingWords.length}
                  </span>
                  {trainingType === 'jam' && (
                    <span className="bg-red-100 text-red-700 px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                      ‚è±Ô∏è {timeLeft}
                    </span>
                  )}
                  <span className="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                    üí° {userStats.hintsRemaining}
                  </span>
                </div>
              </div>
              
              <div className="text-center py-6">
                {typeof currentQuestion.word.image === 'string' && (currentQuestion.word.image.startsWith('http') || currentQuestion.word.image.startsWith('data:')) ? (
                  <img
                    src={currentQuestion.word.image}
                    alt={currentQuestion.word.english}
                    className="w-24 h-24 mb-4 mx-auto object-cover rounded"
                  />
                ) : (
                  <span className="text-6xl mb-4 inline-block">{currentQuestion.word.image}</span>
                )}
                <h2 className="text-2xl font-bold text-gray-800 mb-2">
                  {currentQuestion.word.russian}
                </h2>
              </div>
            </div>
            
            {/* –ü–æ–ª–µ –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å–ª–æ–≤–∞ */}
            <div className="mb-6 min-h-[60px] p-4 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
              <div className="flex flex-wrap gap-2 justify-center">
                {selectedLetters.length > 0 ? (
                  selectedLetters.map((letter, index) => (
                    <button
                      key={`selected-${index}`}
                      onClick={() => handleLetterClick(letter, false)}
                      className="w-12 h-12 bg-blue-500 text-white text-xl font-bold rounded-lg hover:bg-blue-600 transition-all transform hover:scale-110"
                    >
                      {letter.letter.toUpperCase()}
                    </button>
                  ))
                ) : (
                  <p className="text-gray-400">–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –±—É–∫–≤—ã —Å–Ω–∏–∑—É</p>
                )}
              </div>
            </div>
            
            {/* –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã */}
            <div className="flex flex-wrap gap-2 justify-center mb-6">
              {scrambledLetters.map((letter) => (
                <button
                  key={`scrambled-${letter.id}`}
                  onClick={() => handleLetterClick(letter, true)}
                  disabled={letter.used}
                  className={`w-12 h-12 text-xl font-bold rounded-lg transition-all transform hover:scale-110 ${
                    letter.used
                      ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      : 'bg-white border-2 border-gray-300 hover:border-blue-400 hover:bg-blue-50'
                  }`}
                >
                  {letter.letter.toUpperCase()}
                </button>
              ))}
            </div>
            
            {showResult && (
              <div className={`p-4 rounded-lg mb-4 ${
                assembled === currentQuestion.correctAnswer
                  ? 'bg-green-100 text-green-800'
                  : 'bg-red-100 text-red-800'
              }`}>
                {assembled === currentQuestion.correctAnswer ? (
                  <p className="font-semibold text-center">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</p>
                ) : (
                  <div className="text-center">
                    <p className="font-semibold">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</p>
                    <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {currentQuestion.correctAnswer.toUpperCase()}</p>
                  </div>
                )}
              </div>
            )}
            
            {!showResult && (
              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setSelectedLetters([]);
                    setScrambledLetters(scrambledLetters.map(l => ({ ...l, used: false })));
                  }}
                  className="flex-1 bg-gray-500 text-white py-2 px-4 rounded-lg hover:bg-gray-600 transition-colors"
                >
                  <RotateCcw className="w-4 h-4 inline mr-2" />
                  –°–±—Ä–æ—Å–∏—Ç—å
                </button>
                <button
                  onClick={() => checkAnswer()}
                  disabled={selectedLetters.length !== currentQuestion.correctAnswer.length}
                  className="flex-1 bg-gradient-to-r from-blue-500 to-purple-600 text-white py-2 px-4 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-colors disabled:opacity-50"
                >
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                </button>
              </div>
            )}
          </div>
        </div>
      );
    }
    
    // –†–µ–∂–∏–º –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    if (mode === 'listening') {
      return (
        <div className="max-w-2xl mx-auto p-6">
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="mb-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-600">
                  –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ:
                </h3>
                <div className="flex items-center gap-4">
                  <span className="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-semibold">
                    –û—Å—Ç–∞–ª–æ—Å—å: {trainingWords.length}
                  </span>
                  {trainingType === 'jam' && (
                    <span className="bg-red-100 text-red-700 px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                      ‚è±Ô∏è {timeLeft}
                    </span>
                  )}
                  <span className="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                    üí° {userStats.hintsRemaining}
                  </span>
                </div>
              </div>
              
              <div className="text-center py-8">
                <button
                  onClick={() => {
                    const utterance = new SpeechSynthesisUtterance(currentQuestion.word.english);
                    utterance.lang = 'en-US';
                    speechSynthesis.speak(utterance);
                  }}
                  className="p-6 bg-blue-100 rounded-full hover:bg-blue-200 transition-colors"
                >
                  <Headphones className="w-12 h-12 text-blue-600" />
                </button>
                <p className="mt-4 text-gray-600">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è</p>
                {showHint && (
                  <p className="text-gray-500 mt-4">
                    –ü–æ–¥—Å–∫–∞–∑–∫–∞: {currentQuestion.word.russian}
                  </p>
                )}
              </div>
            </div>
            
            <div className="space-y-4">
              <input
                type="text"
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && !showResult && checkAnswer()}
                disabled={showResult}
                className="w-full px-4 py-3 text-lg border-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Type the word you hear..."
                autoFocus
              />
              
              {showResult && (
                <div className={`p-4 rounded-lg ${
                  userInput.toLowerCase().trim() === currentQuestion.correctAnswer.toLowerCase()
                    ? 'bg-green-100 text-green-800'
                    : 'bg-red-100 text-red-800'
                }`}>
                  {userInput.toLowerCase().trim() === currentQuestion.correctAnswer.toLowerCase() ? (
                    <p className="font-semibold">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</p>
                  ) : (
                    <div>
                      <p className="font-semibold">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</p>
                      <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {currentQuestion.correctAnswer}</p>
                    </div>
                  )}
                </div>
              )}
              
              {!showResult && (
                <div className="flex gap-3">
                  <button
                    onClick={useHint}
                    disabled={showHint}
                    className="flex-1 bg-yellow-500 text-white py-2 px-4 rounded-lg hover:bg-yellow-600 transition-colors disabled:opacity-50"
                  >
                    üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ ({userStats.hintsRemaining})
                  </button>
                  <button
                    onClick={() => checkAnswer()}
                    className="flex-1 bg-gradient-to-r from-blue-500 to-purple-600 text-white py-2 px-4 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-colors"
                  >
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    }
    
    // –†–µ–∂–∏–º –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
    if (mode === 'first-letter') {
      return (
        <div className="max-w-2xl mx-auto p-6">
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="mb-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-600">
                  –î–æ–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ:
                </h3>
                <div className="flex items-center gap-4">
                  <span className="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-semibold">
                    –û—Å—Ç–∞–ª–æ—Å—å: {trainingWords.length}
                  </span>
                  {trainingType === 'jam' && (
                    <span className="bg-red-100 text-red-700 px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                      ‚è±Ô∏è {timeLeft}
                    </span>
                  )}
                  <span className="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                    üí° {userStats.hintsRemaining}
                  </span>
                </div>
              </div>
              
              <div className="text-center py-8">
                {typeof currentQuestion.word.image === 'string' && (currentQuestion.word.image.startsWith('http') || currentQuestion.word.image.startsWith('data:')) ? (
                  <img
                    src={currentQuestion.word.image}
                    alt={currentQuestion.word.english}
                    className="w-24 h-24 mb-4 mx-auto object-cover rounded"
                  />
                ) : (
                  <span className="text-6xl mb-4 inline-block">{currentQuestion.word.image}</span>
                )}
                <h2 className="text-2xl font-bold text-gray-800 mb-2">
                  {currentQuestion.word.russian}
                </h2>
                <p className="text-3xl font-mono text-gray-600 letter-spacing-2">
                  {currentQuestion.hint}
                </p>
              </div>
            </div>
            
            <div className="space-y-4">
              <input
                type="text"
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && !showResult && checkAnswer()}
                disabled={showResult}
                className="w-full px-4 py-3 text-lg border-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Type the full word..."
                autoFocus
              />
              
              {showResult && (
                <div className={`p-4 rounded-lg ${
                  userInput.toLowerCase().trim() === currentQuestion.correctAnswer.toLowerCase()
                    ? 'bg-green-100 text-green-800'
                    : 'bg-red-100 text-red-800'
                }`}>
                  {userInput.toLowerCase().trim() === currentQuestion.correctAnswer.toLowerCase() ? (
                    <p className="font-semibold">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</p>
                  ) : (
                    <div>
                      <p className="font-semibold">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</p>
                      <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {currentQuestion.correctAnswer}</p>
                    </div>
                  )}
                </div>
              )}
              
              {!showResult && (
                <button
                  onClick={() => checkAnswer()}
                  className="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white py-3 px-4 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-colors"
                >
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                </button>
              )}
            </div>
          </div>
        </div>
      );
    }
    
    return null;
  };

  const TrainingSummary = () => {
    const confettiPlayed = useRef(false);
    useEffect(() => {
      if (confettiPlayed.current) return;
      confettiPlayed.current = true;
      const colors = ['#bb0000', '#ffffff', '#3333ff', '#00bb00', '#ffbb00', '#ff00bb'];
      const pieces = 100;
      for (let i = 0; i < pieces; i++) {
        const piece = document.createElement('div');
        piece.className = 'confetti-piece';
        piece.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        piece.style.setProperty('--end-x', (Math.random() * 400 - 200) + 'px');
        piece.style.setProperty('--end-y', (-Math.random() * 200 - 50) + 'px');
        document.body.appendChild(piece);
        setTimeout(() => piece.remove(), 1500);
      }
    }, []);
    return (
      <div className="max-w-2xl mx-auto p-6">
        <div className="bg-white rounded-2xl shadow-xl p-8 text-center">
          <h2 className="text-2xl font-bold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
          <p className="mb-1">–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {trainingStats.correct} —Å–ª–æ–≤</p>
          <p className="mb-4">–û—à–∏–±–æ–∫: {trainingStats.incorrect}</p>
          {trainingType === 'zapominanie' && (
            <div className="text-left">
              <h3 className="font-semibold mb-2">–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤:</h3>
              <ul className="list-disc pl-5 space-y-1">
                {trainingStats.results.map(r => {
                  const wordObj = words.find(w => w.id === r.id);
                  return (
                    <li key={r.id}>
                      <button
                        onClick={() => wordObj && setSelectedWord(wordObj)}
                        className="text-blue-600 hover:underline"
                      >
                        {r.word}
                      </button>
                      {' '}‚Äî —É—Ä–æ–≤–µ–Ω—å {r.level}
                      {r.levelUp > 0 ? ` (+${r.levelUp})` : ''}
                      {r.learned ? ' ‚≠ê' : ''}
                    </li>
                  );
                })}
              </ul>
            </div>
          )}
          {trainingType === 'jam' && (
            <div className="text-left">
              <h3 className="font-semibold mb-2">–°–ª–æ–≤–∞:</h3>
              <ul className="list-disc pl-5 space-y-1">
                {trainingStats.results.map(r => {
                  const wordObj = words.find(w => w.id === r.id);
                  return (
                    <li key={r.id}>
                      <button
                        onClick={() => wordObj && setSelectedWord(wordObj)}
                        className="text-blue-600 hover:underline"
                      >
                        {r.word}
                      </button>
                      {' '}‚Äî {r.correct ? '‚úÖ' : '‚ùå'}
                    </li>
                  );
                })}
              </ul>
            </div>
          )}
          <button
            onClick={() => setCurrentView('dashboard')}
            className="mt-6 bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600"
          >
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤
  const WordListModal = ({ modal, onClose }) => (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">{modal.title}</h2>
          <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded">
            <X className="w-5 h-5" />
          </button>
        </div>
        <ul className="space-y-2">
          {modal.words.map(w => (
              <li
                key={w.id}
                className="word-card-list cursor-pointer"
                onClick={() => {
                  setSelectedWord(w);
                  onClose();
                }}
              >
                <div className="word-left">
                  <div className="word-media">
                    {typeof w.image === 'string' && (w.image.startsWith('http') || w.image.startsWith('data:')) ? (
                      <img src={w.image} alt={w.english} className="h-full w-full object-cover" />
                    ) : (
                      <span className="text-2xl grid place-items-center h-full w-full">{w.image}</span>
                    )}
                  </div>
                  <div className="min-w-0">
                    <p className="word-title">{w.english}</p>
                  </div>
                </div>
                <div className="word-right">
                  <div className="flex items-center justify-center gap-2 self-center w-full">
                    <div className="progress-bar">
                      <div className="progress-bar-fill" style={{ width: `${(w.level / maxLevel) * 100}%` }} />
                    </div>
                    <span className="text-xs text-slate-500">{w.level}/{maxLevel}</span>
                  </div>
                </div>
              </li>
          ))}
        </ul>
      </div>
    </div>
  );

  const WordDetailsModal = ({ word, onClose }) => {
    const accuracy = word.reviewCount > 0
      ? Math.round(((word.reviewCount - word.errorCount) / word.reviewCount) * 100)
      : 0;
    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold">–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–ª–æ–≤–∞</h2>
            <div className="flex gap-2">
              <button
                onClick={() => { onClose(); setEditingWord(word); }}
                className="p-2 hover:bg-gray-100 rounded"
              >
                <Edit2 className="w-5 h-5" />
              </button>
              <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded">
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
          <div className="flex flex-col items-center gap-4">
            <div className="w-40 h-40 rounded-lg bg-gray-100 flex items-center justify-center overflow-hidden text-7xl">
              {typeof word.image === 'string' && (word.image.startsWith('http') || word.image.startsWith('data:')) ? (
                <img src={word.image} alt={word.english} className="h-full w-full object-cover" />
              ) : (
                <span>{word.image}</span>
              )}
            </div>
            <div className="flex items-center gap-2">
              <h3 className="text-2xl font-bold text-center">{word.english}</h3>
              <button
                onClick={() => {
                  const utterance = new SpeechSynthesisUtterance(word.english);
                  speechSynthesis.speak(utterance);
                }}
                className="p-2 hover:bg-gray-100 rounded"
              >
                <Volume2 className="w-5 h-5" />
              </button>
            </div>
            {word.pronunciation && (
              <p className="text-gray-500">{word.pronunciation}</p>
            )}
            <p className="text-lg text-blue-600 text-center">{word.russian}</p>
            {word.examples && word.examples.length > 0 && (
              <div className="w-full">
                <h3 className="font-semibold mb-2 text-center">–ü—Ä–∏–º–µ—Ä—ã</h3>
                <ul className="list-disc list-inside space-y-1 text-sm text-left">
                  {word.examples.map((ex, i) => (
                    <li key={i}>{ex}</li>
                  ))}
                </ul>
              </div>
            )}
            <div className="w-full">
              <h3 className="font-semibold mb-2 text-center">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
              <p className="text-sm">–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π: {word.reviewCount}</p>
              <p className="text-sm">–û—à–∏–±–æ–∫: {word.errorCount}</p>
              {word.reviewCount > 0 && (
                <div className="mt-2">
                  <div className="w-full bg-gray-200 rounded-full h-3">
                    <div className="bg-green-500 h-3 rounded-full" style={{ width: `${accuracy}%` }} />
                  </div>
                  <p className="text-xs text-gray-500 text-center mt-1">–¢–æ—á–Ω–æ—Å—Ç—å {accuracy}%</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
  const Dashboard = () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç–æ–≤
    const activeBoosts = userStats.activeBoosts.filter(b => b.expiresAt > Date.now());
    
    return (
      <div className="max-w-6xl mx-auto p-6">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <div className="bg-gradient-to-r from-purple-600 to-blue-600 rounded-2xl p-6 text-white mb-8">
          <div className="flex justify-between items-center mb-4">
            <div>
              <h2 className="text-2xl font-bold mb-2">–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</h2>
              <div className="flex items-center gap-4">
                <span className="flex items-center gap-2">
                  <Trophy className="w-5 h-5" />
                  –£—Ä–æ–≤–µ–Ω—å {userStats.level}
                </span>
                <span className="flex items-center gap-2">
                  <Zap className="w-5 h-5" />
                  {userStats.xp} XP
                </span>
                <span className="flex items-center gap-2">
                  <Coins className="w-5 h-5" />
                  {userStats.coins} –º–æ–Ω–µ—Ç
                </span>
              </div>
            </div>
            <div className="text-right">
              <div className="flex items-center gap-2 mb-2">
                <Flame className="w-5 h-5" />
                <span className="text-xl font-bold">{userStats.streak}</span>
              </div>
              <p className="text-sm opacity-90">–¥–Ω–µ–π –ø–æ–¥—Ä—è–¥</p>
            </div>
          </div>
          
          {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã */}
          {activeBoosts.length > 0 && (
            <div className="mt-4 p-3 bg-white/20 rounded-lg">
              <p className="text-sm font-semibold mb-2">–ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã:</p>
              <div className="flex gap-2">
                {activeBoosts.map(boost => (
                  <span key={boost.id} className="bg-white/30 px-2 py-1 rounded text-xs">
                    {boost.id === 'boost-xp' ? '‚ö° XP x2' : 'üß≤ –ú–æ–Ω–µ—Ç—ã x2'}
                  </span>
                ))}
              </div>
            </div>
          )}
          
          <div className="bg-white/20 rounded-lg p-4 backdrop-blur mt-4">
            <div className="flex justify-between text-sm mb-2">
              <span>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è</span>
              <span>{userStats.xp % 100}/100 XP</span>
            </div>
            <div className="w-full bg-white/30 rounded-full h-3">
              <div
                className="bg-white rounded-full h-3 transition-all"
                style={{ width: `${userStats.xp % 100}%` }}
              />
            </div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤ */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <div
            className="bg-white rounded-xl p-4 shadow-lg cursor-pointer hover:shadow-xl"
            onClick={() => setWordListModal({ title: '–í—Å–µ —Å–ª–æ–≤–∞', words })}
          >
            <div className="flex items-center justify-between mb-2">
              <BookOpen className="w-8 h-8 text-blue-500" />
              <span className="text-2xl font-bold">{words.length}</span>
            </div>
            <p className="text-gray-600">–í—Å–µ–≥–æ —Å–ª–æ–≤</p>
          </div>

          <div
            className="bg-white rounded-xl p-4 shadow-lg cursor-pointer hover:shadow-xl"
            onClick={() => setWordListModal({ title: '–°–ª–æ–≤–∞ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é', words: wordsToReview })}
          >
            <div className="flex items-center justify-between mb-2">
              <Clock className="w-8 h-8 text-red-500" />
              <span className="text-2xl font-bold">{wordsToReview.length}</span>
            </div>
            <p className="text-gray-600">–ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é</p>
          </div>

          <div
            className="bg-white rounded-xl p-4 shadow-lg cursor-pointer hover:shadow-xl"
            onClick={() => setWordListModal({ title: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', words: words.filter(w => w.status === 'learning') })}
          >
            <div className="flex items-center justify-between mb-2">
              <Target className="w-8 h-8 text-yellow-500" />
              <span className="text-2xl font-bold">{words.filter(w => w.status === 'learning').length}</span>
            </div>
            <p className="text-gray-600">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</p>
          </div>

          <div
            className="bg-white rounded-xl p-4 shadow-lg cursor-pointer hover:shadow-xl"
            onClick={() => setWordListModal({ title: '–ò–∑—É—á–µ–Ω–æ', words: words.filter(w => w.status === 'mastered') })}
          >
            <div className="flex items-center justify-between mb-2">
              <Award className="w-8 h-8 text-green-500" />
              <span className="text-2xl font-bold">{words.filter(w => w.status === 'mastered').length}</span>
            </div>
            <p className="text-gray-600">–ò–∑—É—á–µ–Ω–æ</p>
          </div>
        </div>

        {/* –†–∞–∑–¥–µ–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ */}
        <h3 className="text-xl font-bold mb-4">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤:</h3>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button
            onClick={() => {
              if (newWords.length > 0) {
                setReviewWords(newWords);
                setCurrentCardIndex(0);
                setCurrentView('cards');
                setShowAnswer(false);
              }
            }}
            disabled={newWords.length === 0}
            className={`bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl p-6 shadow-lg transition-all transform ${
              newWords.length > 0 ? 'hover:shadow-xl hover:scale-105' : 'opacity-50 cursor-not-allowed'
            }`}
          >
            <Clock className="w-8 h-8 mb-2" />
            <h3 className="text-lg font-bold mb-1">–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞</h3>
            <p className="text-sm opacity-90">{newWords.length} –Ω–æ–≤—ã—Ö —Å–ª–æ–≤</p>
          </button>

          <button
            onClick={startTraining}
            className="bg-gradient-to-r from-orange-500 to-pink-600 text-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all transform hover:scale-105"
          >
            <Sparkles className="w-8 h-8 mb-2" />
            <h3 className="text-lg font-bold mb-1">–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</h3>
            <p className="text-sm opacity-90">–°–º–µ—à–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</p>
          </button>

          <button
            onClick={startJam}
            className="bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all transform hover:scale-105"
          >
            <Music className="w-8 h-8 mb-2" />
            <h3 className="text-lg font-bold mb-1">–°–ª–æ–≤–∞—Ä–Ω—ã–π –¥–∂–µ–º</h3>
            <p className="text-sm opacity-90">–î–æ 30 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤</p>
          </button>

          <button
            onClick={() => setShowAddWordForm(true)}
            className="bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all transform hover:scale-105"
          >
            <Plus className="w-8 h-8 mb-2" />
            <h3 className="text-lg font-bold mb-1">–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞</h3>
            <p className="text-sm opacity-90">–°–æ–∑–¥–∞–π —Å–≤–æ—é –±–∞–∑—É</p>
          </button>
        </div>
      </div>
    );
  };

  return (
    <div className={`min-h-screen ${getThemeColors()}`}>
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <nav className="bg-white shadow-md sticky top-0 z-10">
        <div className="max-w-6xl mx-auto px-6 py-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-2">
              <BookOpen className="w-8 h-8 text-blue-600" />
              <h1 className="text-2xl font-bold text-gray-800">WordMaster</h1>
            </div>
            
            <div className="flex gap-4">
              <button
                onClick={() => setCurrentView('dashboard')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentView === 'dashboard' ? 'bg-blue-100 text-blue-600' : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                –ì–ª–∞–≤–Ω–∞—è
              </button>
              <button
                onClick={() => setCurrentView('words')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentView === 'words' ? 'bg-blue-100 text-blue-600' : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                –°–ª–æ–≤–∞
              </button>
              <button
                onClick={() => setCurrentView('shop')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentView === 'shop' ? 'bg-blue-100 text-blue-600' : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <ShoppingCart className="w-5 h-5 inline mr-1" />
                –ú–∞–≥–∞–∑–∏–Ω
              </button>
              <button
                onClick={() => setCurrentView('stats')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentView === 'stats' ? 'bg-blue-100 text-blue-600' : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <BarChart3 className="w-5 h-5 inline mr-1" />
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </button>
            </div>
          </div>
        </div>
      </nav>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="py-8">
        {currentView === 'dashboard' && <Dashboard />}
        {currentView === 'words' && (
          <WordsList
            categories={categories}
            selectedCategory={selectedCategory}
            setSelectedCategory={setSelectedCategory}
            filteredWords={filteredWords}
            maxLevel={maxLevel}
            deleteWord={deleteWord}
            setShowAddWordForm={setShowAddWordForm}
            onWordClick={setSelectedWord}
            addCategory={addCategory}
            generateWord={generateAutoWord}
            importCSV={importCSV}
          />
        )}
        {currentView === 'shop' && <Shop />}
        {currentView === 'stats' && <Statistics />}
        {currentView === 'cards' && reviewWords.length > 0 && (
          <div className="px-6">
            <div className="max-w-md mx-auto mb-4">
              <div className="flex justify-between items-center text-sm text-gray-600">
                <span>–ö–∞—Ä—Ç–æ—á–∫–∞ {currentCardIndex + 1} –∏–∑ {reviewWords.length}</span>
                <button
                  onClick={() => setCurrentView('dashboard')}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                <div
                  className="bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all"
                  style={{ width: `${((currentCardIndex + 1) / reviewWords.length) * 100}%` }}
                />
              </div>
            </div>
            <WordCard word={reviewWords[currentCardIndex]} />
          </div>
        )}
        {currentView === 'training' && <TrainingComponent />}
        {currentView === 'trainingSummary' && <TrainingSummary />}
      </div>
      
      {wordListModal && (
        <WordListModal modal={wordListModal} onClose={() => setWordListModal(null)} />
      )}
      {selectedWord && (
        <WordDetailsModal word={selectedWord} onClose={() => setSelectedWord(null)} />
      )}
      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ */}
      {showAddWordForm && (
        <AddWordForm
          newWord={newWord}
          handleNewWordChange={handleNewWordChange}
          handleExampleChange={handleExampleChange}
          addNewWord={addNewWord}
          setShowAddWordForm={setShowAddWordForm}
          emojiList={emojiList}
          handleImageUpload={handleImageUpload}
          categories={categoryOptions}
        />
      )}
      {editingWord && (
        <EditWordForm
          word={editingWord}
          handleWordChange={handleEditWordChange}
          handleExampleChange={handleEditExampleChange}
          saveWord={saveEditedWord}
          onClose={() => setEditingWord(null)}
          emojiList={emojiList}
          handleImageUpload={handleEditImageUpload}
          categories={categoryOptions}
          resetProgress={resetWordProgress}
          markLearned={markWordLearned}
        />
      )}
    </div>
  );
};

export default App;
